# -*- coding: utf-8 -*-
"""Second_Model_Predict_Color.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11vxPXPUcfQVe2_sQmMEp7YRPYN7cH26S
"""

import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt
import os
from keras.preprocessing.image import ImageDataGenerator 
from keras.preprocessing import image
import random
from keras.preprocessing.image import load_img, img_to_array

train=ImageDataGenerator(rescale=1/255)
val=ImageDataGenerator(rescale=1/255)

train_dataset=train.flow_from_directory("/content/drive/MyDrive/Color/Train",
                                        target_size=(200,200),
                                        batch_size=3
                                        )

val_dataset=val.flow_from_directory("/content/drive/MyDrive/Color/Val",
                                        target_size=(200,200),
                                        batch_size=3
                                        )

model = tf.keras.Sequential([
    tf.keras.layers.Flatten(input_shape=(200, 200, 3)),
    tf.keras.layers.Dense(100, activation='relu'),
    tf.keras.layers.Dense(3, activation='softmax')
])

model.compile(optimizer=tf.keras.optimizers.SGD(learning_rate=1e-2), 
             loss="categorical_crossentropy",
              metrics=['accuracy'])

model_fit=model.fit(train_dataset,epochs=10,validation_data=val_dataset,)

get_acc = model_fit.history['accuracy']
value_acc = model_fit.history['val_accuracy']
get_loss = model_fit.history['loss']
validation_loss = model_fit.history['val_loss']

epochs = range(len(get_acc))
plt.plot(epochs, get_acc, 'r', label='Accuracy of Training data')
plt.plot(epochs, value_acc, 'b', label='Accuracy of Validation data')
plt.title('Training vs validation accuracy')
plt.legend(loc=0)
plt.figure()
plt.show()

epochs = range(len(get_loss))
plt.plot(epochs, get_loss, 'r', label='Loss of Training data')
plt.plot(epochs, validation_loss, 'b', label='Loss of Validation data')
plt.title('Training vs validation loss')
plt.legend(loc=0)
plt.figure()
plt.show()

image=load_img("/content/Image_for_CV_task_1.jpg",target_size=(200,200))
plt.imshow(image)
image=img_to_array(image) 
image=image/255.0
prediction_image=np.array(image)
prediction_image= np.expand_dims(image, axis=0)

prediction=model.predict(prediction_image)
value=np.argmax(prediction)
print("Prediction is {}".format(value))